sudo: required
language: python
services:
  - docker
cache:
  directories:
    - $HOME/postgresql

env:
  global:
    - GREP_TIMEOUT=360
    - REGISTRY_USER=rapidproautomation
    # NOTE: this is generated with `travis encrypt REGISTRY_PASS="the-password"`
    #       which is decrypted by Travis CI and set as environment variables
    - secure: ffYdrH1sxDNP+KrE3cnP2r5lYsRGOmPUwlBON60GsYKwMQDg8Of5vt9fK5FzW9p5SWTpcAhCHeuJjbQ8qB0i4Uh5HtAs2focQdH13CQSQ5RZroNP60gV4WQENmxHqCaLuMQ4zgLQjKdu2R1PkEaUwm/HdHOzQ1Gwt+QEivPgCxtxdvfMFoebffzunpISSoOxSA7DJLWfuWqhszOF2oa+KxrMp/DAVnjwKhyepqSbdxOfuYiKyEdmoiic8S4TLgeDcYSxJnZgGzDP8p3HRahGmXsosMeg2eNghohKZ+c2tiD7DBHbRIrikC1da6/XnsXpcz+ugHuMTw5QTvZcgqKfGkoOchg9/ae5vXWCNQL4b7CPPxgnuxO0jeNUgbeQLnbqrkyxgudCSrTRKlCdmE5G6QijzwyWYOy2BV7+8Ybs17EfqFtSnzn6J6D4+prbklQGy8zB3oyZZXPSPgTFdImyrYAL96Ag1jI6EbwfodzY7himEnquvmcpC9sDoEdX/Z9JWWRKAxqeADzDx/IXiVfT4M155Np8cq8pWFypKOy03DE8KsHnOwaPz0qxgl/imvXW198SUe9qmiavOCY0h+taHK50JK7mKzokCDI25OYbei91iW+0GSuQ4ZR78NeTDO4ktKDZkA9oYMHzi9oKoBCSe8SbZffkRGe6bK45MXvvfEo=
    - secure: dENLino1wAUBgRjsZ/rxNCxJBbLAgDYicPxSxIJT2kJ/PBwqWt2rYnQMhbamVHp7EqwgG8UnKAdE2gBOLM2ADnmLsSlQlam0GH6B/LFzdKmAgkHeo3jI8vYHiE6L9YGnYx07BBHRBLHteCIICe61Rw1hSkTK7B+SYmwcZIW2Yr0ncxzDhnCmzdf3+yrmMq8r2ERhe3uu8GBwFVCRy8e6mpeScS/6nUGhOWGnfG44KdxTLLVj9Pe1xx0DtIOmLayfvUHuz7VAPtRyl8B9g3DSJM9BfcEkyrVOJSy31XL0ktP0HeJlGvsiki1dHMxzokVO4vqQVdhyROuYDoYwgGQb1Ji+4yFBbyWaFooSBR2wtdTSBhFNlUkOQKbU2xH2K7WIlNcNeNTFgkTNJZlfn14bdlzS7o2EPAXIhGET9VakljZ0S8eabSssWdGQP4B140b31JIq+ovinbuw6BlJcScYHe55Wbx9EpfQli23/wTmHpb3jGu8zxFGhfMRLHF+h+zGoEx2tNmTTTjX3Nd2rgtaDYwleJyFw6uxcr6dz4FTkqWjXzx8kUDbOauDc7phfo1kzQ4YB63BpSyl+0x/2NUTFWveN+ZWokOsnEG1xIfx/RwEU/267EvrxmNOzEGaep8PyruU+l1fBIwZDL7zro5hZ9aFocK5+0hAihaSRcBSGAk=
  matrix:
    - IMAGE="sdehaan/rapidpro" VERSION="" REPO="smn/rapidpro"
    - IMAGE="sdehaan/rapidpro" VERSION="master" REPO="smn/rapidpro"

# Update Docker Engine
before_install:
  - sudo apt-get update
  - sudo apt-get install -qy -o Dpkg::Options::="--force-confold" docker-ce coreutils

before_cache:
  - docker exec --user=postgres postgresql pg_dump rapidpro > $HOME/postgresql/rapidpro.sql

before_script:
  - echo "https://api.github.com/repos/$REPO/tags"
  - jq --version
  - 'curl -H "Authorization: Bearer $GITHUB_ACCESS_TOKEN" -s https://api.github.com/repos/$REPO/tags | tee ./tags.json'
  - head ./tags.json
  - LATEST_TAG=$(cat ./tags.json | jq -r '.[0].name')
  - VERSION=${VERSION:-$LATEST_TAG}

install:
  - echo "preventing default pip install here"

script:
  # Setup postgresql and load sql dump if exists
  - docker pull mdillon/postgis:9.6
  - docker run -d --name postgresql -e POSTGRES_DB=rapidpro mdillon/postgis:9.6
  - timeout $GREP_TIMEOUT grep -m 1 'PostgreSQL init process complete; ready for start up.' <(docker logs --follow postgresql 2>&1)
  # Load the cached postgresql dump to speed up migrations
  - if [[ -f $HOME/postgresql/rapidpro.sql ]]; then cat $HOME/postgresql/rapidpro.sql | docker exec -i --user=postgres postgresql psql rapidpro; fi

  # Setup redis
  - docker pull redis:alpine
  - docker run -d --name redis redis:alpine
  - timeout $GREP_TIMEOUT grep -m 1 'Ready to accept connections' <(docker logs --follow redis 2>&1)

  # Build RapidPro and run it
  - docker pull sdehaan/rapidpro-base-docker:v4
  # This can fail if this is the first run and a :latest tag doesn't exist yet.
  - docker pull "$IMAGE" || true
  - >
    docker build --pull \
      --tag "$IMAGE" \
      --cache-from "$IMAGE" \
      --build-arg RAPIDPRO_VERSION=$VERSION \
      --build-arg RAPIDPRO_REPO=$REPO \
      .
  - >
    docker run --name rapidpro \
      --env-file docker.envfile \
      --link redis \
      --link postgresql \
      --publish 8000:8000 \
      --detach \
      "$IMAGE"

  - timeout $GREP_TIMEOUT grep -m 1 'static files copied' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'Compressing... done' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'Running migrations' <(docker logs --follow rapidpro 2>&1)
  # See docker.envfile for the switch to turn this on. Defaults to off because these API
  # calls are subject to GitHub's rate limiting of Travis CI IPs
  # - timeout $GREP_TIMEOUT grep -m 1 'Downloading geojson for relation_ids 192796' <(docker logs --follow rapidpro 2>&1)
  # - timeout $GREP_TIMEOUT grep -m 1 'Imported geojson for relation_ids 192796' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'spawned uWSGI http 1' <(docker logs --follow rapidpro 2>&1)
  - docker exec rapidpro /venv/bin/python /rapidpro/manage.py check

after_script:
  - docker logs rapidpro
  - docker images

before_deploy:
  - pip install docker-ci-deploy==0.3.0
  - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"
deploy:
  provider: script
  skip_cleanup: true
  script: dcd --tag-version "$VERSION" --tag-semver --tag-latest "$IMAGE"
  on:
    branch: develop
